nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = organism,
pAdjustMethod = "none")
View(gse)
require(DOSE)
dotplot(gse, showCategory=10, split=".sign") + facet_grid(.~.sign)
emapplot(gse, showCategory = 10)
#github
d <- GOSemSim::godata("org.Hs.eg.db", ont = "BP")
compare_cluster_GO_emap <- enrichplot::pairwise_termsim(compare_cluster_GO, semData = d)
compare_cluster_GO_emap <- enrichplot::pairwise_termsim(gse, semData = d)
emapplot(compare_cluster_GO_emap)
# categorySize can be either 'pvalue' or 'geneNum'
cnetplot(gse, categorySize="pvalue", foldChange=gene_list, showCategory = 3)
ridgeplot(gse) + labs(x = "enrichment distribution")
install('ggridges')
ridgeplot(gse) + labs(x = "enrichment distribution")
# Use the `Gene Set` param for the index in the title, and as the value for geneSetId
gseaplot(gse, by = "all", title = gse$Description[1], geneSetID = 1)
terms <- gse$Description[1:3]
pmcplot(terms, 2010:2018, proportion=FALSE)
install('europepmc')
terms <- gse$Description[1:3]
pmcplot(terms, 2010:2018, proportion=FALSE)
?gseGO
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "ENSEMBL",
nPerm = 10000,
minGSSize = 3,
maxGSSize = 800,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = organism,
pAdjustMethod = "none")
require(DOSE)
dotplot(gse, showCategory=10, split=".sign") + facet_grid(.~.sign)
library(DBI)
library(RSQLite)
driver <- dbDriver("MySQL")
driver <- dbDriver("SQLite")
db_file <- system.file(
"extdata",
"crabtag.sqlite",
package = "learningr"
)
conn <- dbConnect(driver, db_file)
conn
library(RMySQL)
install.packages("RMySQL")
library(RMySQL)
driver <- dbDriver("MySQL")
db_file <- "path/to/MySQL/database"
conn <- dbConnect(driver, db_file)
driver <- dbDriver("MySQL")
db_file <- "path/to/MySQL/database"
conn <- dbConnect(driver, db_file)
driver <- dbDriver("SQLite")
db_file <- system.file(
"extdata",
"crabtag.sqlite",
package = "learningr"
)
conn <- dbConnect(driver, db_file)
query <- "SELECT * FROM IdBlock"
(id_block <- dbGetQuery(conn, query))
query <- "SELECT * FROM extdata"
(id_block <- dbGetQuery(conn, query))
driver <- dbDriver("MySQL")
db_file <- "path/to/MySQL/db1"
conn <- dbConnect(driver, db_file)
library(RPostgreSQL)
install.packages('RPostgreSQL')
library(RPostgreSQL)
n
# practical lists
#question1
n <- 1:4
n
ch <- c('a','f','r','h')
ch
lg <- (TRUE,FALSE,FALSE,TRUE)
lg <- (TRUE,FALSE,FALSE,TRUE)
lg <- c(TRUE,FALSE,FALSE,TRUE)
lg
#b
x <- 1:10
y <- 11:20
res <- 2*x + y -3
res
#c
odds <- 100:500:2
#c
odds <- 100:500,2
#c
odds <- seq(100,500,2)
odds
#c
odds <- seq(101,500,2)
odds
mean(odds)
sd(odds)
#e
combination <- list(
1:10, array(10:20), list(30:40)
)
combination
v1*v2
#f
v1 <- 1:10
v2 <- 100:120
v1*v2
#f
v1 <- 1:10
v2 <- 100:110
v1*v2
v1
v2
#f
m1 <- matrix(1:50,nrow=10,ncol = 5)
m1
m2 <- matrix(100:150,nrow=10,ncol=5)
m2 <- matrix(101:150,nrow=10,ncol=5)
m2
m1*m2
#g
colmean(m1)
#g
colMeans(m1)
colMeans(m2)
#h
cbind(m1,m2)
rbind(m1,m2)
#i
mat <- matrix(1:12,nrow=3,ncol=4)
mat
nrow(mat) = 2
nrow(mat) <- 2
m1 %*% m2
#f
m1 <- matrix(1:50,nrow=10,ncol = 5)
m1
m2 <- matrix(101:150,nrow=10,ncol=5)
m2
m1 %*% m2
m1 %*% m2
mat_mul<-m1 %*% m2
mat_mul<-m1 %*% m2
m2 <- matrix(101:150,nrow=10,ncol=5)
m2
mat_mul<-m1 %*% m2
mat_mul<-m1 * m2
mat_mul
m2<-matrix(5:8,ncol=2,nrow=2)
m2
m1<-matrix(1:4,ncol=2,nrow=2)
m1
mat_mul<-m1 %*% m2
mat_mul
#f
m1 <- matrix(1:10,nrow=5,ncol = 2)
m1
m2 <- matrix(11:20,nrow=5,ncol=2)
m2
mat_mul<-m1 * m2
mat_mul
#g
colMeans(m1)
colMeans(m2)
#h
cbind(m1,m2)
rbind(m1,m2)
#i
mat <- matrix(1:12,nrow=3,ncol=4)
mat
nrow(mat) <- 2
mat2<-matrix(mat,nrow=2,ncol=4) # forceful warning shown
mat2
#question 2
data("airquality")
summary(airquality)
#a
head(airquality)
#b
dim(airquality)
#c
#to find all the rows including NA values
nrow(airquality) # for general count
nrow(na.omit(airquality))
#d
airquality[Temp>=67 & Temp<=80]
#d
airquality[airquality$Temp>=67 & airquality$Temp<=80]
#d
airquality[airquality$Temp>=67 & airquality$Temp<=80]
#d
airquality[airquality['Temp']>=67 & airquality['Temp']<=80]
subset(airquality, Temp >= 70 & Temp <= 80)
#d
subset(airquality, Temp >= 70 & Temp <= 80)
#e
nrow(airquality$Month==5)
#e
nrow(airquality[airquality$Month==5])
#e
nrow(subset(airquality, Month == 5))
#f
head(airquality, n = 10)
#g
summary(airquality$Wind)
#h
airquality[order(-airquality$Temp), ]
#i
new_observation <- data.frame(Ozone = 25, Solar.R = 150, Wind = 88, Temp = 45, Month = 6, Day = 5)
airquality <- rbind(airquality, new_observation)
getwd()
#question 3
#a
df <- read.csv("/Users/rishav_raj/Desktop/my files/R/toy_dataset.csv")
df
#b
attach(df)
#c
count(subset(df,City="New York City"))
#c
nrow(subset(df,City="New York City"))
nrow(df[df$City == "New York City", ])
unique(df$City)
#d
df[order(-df$Income), ][1:5,]
head(df)
#e
avg<- avg(df$Income)
#e
avg<- mean(df$Income)
avg
nrow(subset(df,Income>avg))
head(df)
max(df$Income[df$Gender=="Female"])
#f
max(df$Income[df$Gender=="Female"])
#g
set.seed(2) # to repro..
random<-df[sample(nrow(df),10),]
random
#h
detach(df)
#question 4
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
connec <- dbConnect(drv,
dbname = jdbc_learning,
host = localhost,
port = 5432,
user = postgres,
password = Iamrishav@0804)
connec <- dbConnect(drv,
dbname = jdbc_learning,
host = localhost,
port = 5432,
user = "postgres",
password = "Iamrishav@0804")
connec <- dbConnect(drv,
dbname = jdbc_learning,
host = "localhost",
port = 5432,
user = "postgres",
password = "Iamrishav@0804")
connec <- dbConnect(drv,
dbname = "jdbc_learning",
host = "localhost",
port = 5432,
user = "postgres",
password = "Iamrishav@0804")
df <- dbGetQuery(connec, "SELECT * FROM Employees")
df <- dbGetQuery(connec, "SELECT * FROM employee")
df
createTable <- "CREATE TABLE STUDENT (ROLLNO INT ,COURSE VARCHAR(30)"
dbSendQuery(createTable)
dbSendQuery(connec,createTable)
createTable <- "CREATE TABLE STUDENT (ROLLNO INT ,COURSE VARCHAR(30))"
dbSendQuery(connec,createTable)
#inserting rows in the table
dbSendQuery(connec, "INSERT INTO STUDENT VALUES(1001,'Computer Science')")
dbSendQuery(connec, "INSERT INTO STUDENT VALUES(1001,'Computer Science')")
dbGetQuery("SELECT * FROM STUDENT")
dbGetQuery(connec,"SELECT * FROM STUDENT")
dbSendQuery(connec, "INSERT INTO STUDENT VALUES(1002,'Electrical')")
dbSendQuery(connec, "INSERT INTO STUDENT VALUES(1003,'Mechanical')")
dbSendQuery(connec, "INSERT INTO STUDENT VALUES(1004,'Aerospace')")
dbSendQuery(connec, "INSERT INTO STUDENT VALUES(1005,'Elctronics')")
dbGetQuery(connec,"SELECT * FROM STUDENT")
#dropping the table
dbSendQuery(connec,"DROP TABLE STUDENT")
#displaying all the information stored in table
dbGetQuery(connec,"SELECT * FROM STUDENT")
#creating studnet table
createTable <- "CREATE TABLE STUDENT (ROLLNO INT ,COURSE VARCHAR(30))"
dbSendQuery(connec,createTable)
#inserting rows in the table
dbSendQuery(connec, "INSERT INTO STUDENT VALUES(1001,'Computer Science')")
dbSendQuery(connec, "INSERT INTO STUDENT VALUES(1002,'Electrical')")
dbSendQuery(connec, "INSERT INTO STUDENT VALUES(1003,'Mechanical')")
dbSendQuery(connec, "INSERT INTO STUDENT VALUES(1004,'Aerospace')")
dbSendQuery(connec, "INSERT INTO STUDENT VALUES(1005,'Elctronics')")
#displaying all the information stored in table
dbGetQuery(connec,"SELECT * FROM STUDENT")
#deleting all rows from the table
dbSendQuery(connec,"DELETE FROM STUDENT")
#displaying all the information stored in table
dbGetQuery(connec,"SELECT * FROM STUDENT")
#dropping the table
dbSendQuery(connec,"DROP TABLE STUDENT")
dbDisconnect(connec)
dbUnloadDriver()
dbUnloadDriver(drv)
setwd("Users/rishav_raj/Desktop/my files/R/")
setwd("/Users/rishav_raj/Desktop/my files/R")
getwd
getwd()
#question5
#a
df <- read.csv("/Users/rishav_raj/Desktop/my files/R/rainfall.csv")
head(df,10)
subst <- df[df$Rainfall>20]
subst <- subset(df,Rainfall>20)
sbst
subst
#c
mean(df[df$Rainfall>=4])
#c
mean(df[df$Rainfall>=4,"Rainfall"])
#d
d_subset <- subset(rainfall, Rainfall.mm. == 0 | Rainfall.mm. == 0.6)
print(d_subset)
#d
d_subset <- subset(df, Rainfall.mm. == 0 | Rainfall.mm. == 0.6)
#d
vector(subset(df$Rainfall,Rainfall==0 & Rainfall==0.6))
#d
vector(subset(df$Rainfall,df$Rainfall==0 & df$Rainfall==0.6))
#d
vector(subset(df,Rainfall==0 & Rainfall==0.6))
#d
rain <- subset(df$Rainfall,Rainfall==0 | Rainfall==0.6)
#d
rain <- subset(df$Rainfall,Rainfall==0)
#d
rain <- subset(df,Rainfall==0 | Rainfall==0.6)
rain <- rain$Rainfall
rain
v <- vector(rain)
v <- as.vector(rain)
v
#e
plot_dataset <- rainfall[!is.na(rainfall$Date), ]
#e
plot_dataset <- df[!is.na(rainfall$Date), ]
#e
plot_dataset <- df[!is.na(df$Date), ]
with(plot_dataset, plot(Date, Rainfall))
with(plot_dataset, plot(date, Rainfall))
#e
plot_dataset <- df[!is.na(df$Date), ]
plot_dataset
#question6
#a
data("iris")
summary(iris)
head(iris)
#b
data <- subset(iris,Species="setosa")
data
#b
data <- subset(iris,Species=="setosa")
data
with(iris,plot(Petal.length,Petal.width))
plot(iris$Petal.Length,iris$Petal.Width)
plot(iris$Petal.Length,iris$Petal.Width,xlab = "Petal Length",ylab = "Petal Width",main = "comparison for length and width")
plot(data$Petal.Length,data$Petal.Width,xlab = "Petal Length",ylab = "Petal Width",main = "comparison for length and width")
#d
hist(iris$Petal.Length)
#e
data<- subset(iris,Species="versicolor")
boxplot(data$Petal.Width)
alcohol <- read.table("tab_deline.txt", header = TRUE)
#a
alcohol_by_year <- split(alcohol, alcohol$Year)
{
year_data <- alcohol_by_year[[i]]
max_beer_country <- year_data$Country[which.max(year_data$Beer)]
min_wine_country <- year_data$Country[which.min(year_data$Wine)]
print(max_beer_country)
print(min_wine_country)
}
for (i in c(1:7))
{
year_data <- alcohol_by_year[[i]]
max_beer_country <- year_data$Country[which.max(year_data$Beer)]
min_wine_country <- year_data$Country[which.min(year_data$Wine)]
print(max_beer_country)
print(min_wine_country)
}
#b
alcohol_in_country <- split(alcohol, alcohol$Country)
for(j in c(1:2))
{
print(summary(alcohol_in_country[[j]]))
}
nz <- alcohol_in_country[[2]]
print(nz[nz$Beer > (mean(nz$Spirit)),"Beer"])
#d
for (i in c(1:7))
{
print(summary(alcohol_by_year[[i]]))
}
#e
aus <- alcohol_in_country[[1]]
mean_beer_of_australia <- mean(aus$Beer)
mean_spirit_of_australia <- mean(aus$Spirit)
mean_wine_of_australia <- mean(aus$Wine)
aus_values <- c(mean_wine_of_australia, mean_spirit_of_australia, mean_beer_of_australia)
plot(aus_values, type = "o", col = "Blue")
mean_beer_of_nz <- mean(nz$Beer)
mean_spirit_of_nz <- mean(nz$Spirit)
mean_wine_of_nz <- mean(nz$Wine)
nz_values <- c(mean_wine_of_nz, mean_spirit_of_nz, mean_beer_of_nz)
lines(nz_values, col = "Green", type = "o",
main = "Australia vs New Zeland alcohol consumption",
xlabs = c("Wine", "Spirit", "Beer"))
#question7
alcohol <- read.table("tab_deline.txt", header = TRUE)
#a
alcohol_by_year <- split(alcohol, alcohol$Year)
for (i in c(1:7))
{
year_data <- alcohol_by_year[[i]]
max_beer_country <- year_data$Country[which.max(year_data$Beer)]
min_wine_country <- year_data$Country[which.min(year_data$Wine)]
print(max_beer_country)
print(min_wine_country)
}
#b
alcohol_in_country <- split(alcohol, alcohol$Country)
for(j in c(1:2))
{
print(summary(alcohol_in_country[[j]]))
}
#c
nz <- alcohol_in_country[[2]]
print(nz[nz$Beer > (mean(nz$Spirit)),"Beer"])
#d
for (i in c(1:7))
{
print(summary(alcohol_by_year[[i]]))
}
#e
aus <- alcohol_in_country[[1]]
mean_beer_of_australia <- mean(aus$Beer)
mean_spirit_of_australia <- mean(aus$Spirit)
mean_wine_of_australia <- mean(aus$Wine)
aus_values <- c(mean_wine_of_australia, mean_spirit_of_australia, mean_beer_of_australia)
plot(aus_values, type = "o", col = "Blue")
mean_beer_of_nz <- mean(nz$Beer)
mean_spirit_of_nz <- mean(nz$Spirit)
mean_wine_of_nz <- mean(nz$Wine)
nz_values <- c(mean_wine_of_nz, mean_spirit_of_nz, mean_beer_of_nz)
lines(nz_values, col = "Green", type = "o",
main = "Australia vs New Zeland alcohol consumption",
xlabs = c("Wine", "Spirit", "Beer"))
getwd()
getwd()
library("devtools")
library("roxygen2")
create_package("findStat")
library(findStat)
library(findStat)
library(RPostgreSQL)
rv <- dbDriver("PostgreSQL")
connec <- dbConnect(drv,
dbname = "jdbc_learning",
host = "localhost",
port = 5432,
user = "postgres",
password = "Iamrishav@0804")
mood<-readline(prompt="Enter mood: ")
results<-dbGetQuery(connec,query)
query<-paste0("SELECT * FROM SONGS WHERE MOOD='",mood,"'")
results<-dbGetQuery(connec,query)
if(nrow(results)==0){
cat("Sorry no songs found")
}else{
cat("songs for your mood:\n")
for(i in 1:norw(results))
cat(paste0(i,'-',result$songname[i],'\n'))
}
#question7
alcohol <- read.table("tab_deline.txt", header = TRUE)
#a
alcohol_by_year <- split(alcohol, alcohol$Year)
for (i in c(1:7))
{
year_data <- alcohol_by_year[[i]]
max_beer_country <- year_data$Country[which.max(year_data$Beer)]
min_wine_country <- year_data$Country[which.min(year_data$Wine)]
print(max_beer_country)
print(min_wine_country)
}
